snippet /
	/** ${1:JAVADOC} */
snippet main
	public static void main(String[] args){
		${1:/* code */}
	}
snippet pu
	public 
snippet po
	protected 
snippet pr
	private 
snippet st
	static 
snippet fi
	final 
snippet ab
	abstract 
snippet iof
	instance of 
snippet bo
	boolean
snippet vo
	void 
snippet re
	return 
snippet br
	break; 
snippet de
	default:
		${1}
snippet ca
	catch(${1:Exception} ${2:e}) ${3}{
		${4}
	}
snippet th
	throw 
snippet sy
	synchronized
snippet im
	import 
snippet imp
	implements
snippet ext
	extends 
snippet j.u
	java.util
snippet j.i
	java.io.
snippet j.b
	java.beans.
snippet j.n
	java.net.
snippet j.m
	java.math.
snippet if
	if(${1}){
		${2}
	}
snippet el
	else{
		${1}
	}
snippet elif
	else if(${1}){
		${2}
	}
snippet do
	do{
		${2}
	}while(${1});
snippet wh
	while(${1}){
		${2}
	}
snippet for
	for(${1}; ${2}; ${3}){
		${4}
	}
snippet fori
	for(int i = ${1:0}; i<${2:100}; i++){
		${3}
	}
snippet fore
	for(${1} : ${2}){
		${3}
	}
snippet sw
	switch(${1}){
		${2}
	}
snippet cs
	case ${1}:
		${2}
	${3}
snippet sk
	public class ${1:`Filename()`} extends ${2:TestCase}{

		//////////
		//Fields//
		//////////
		${3}

		////////////////
		//Constructors//
		////////////////

		/** Constructor for `Filename()` */
		public `Filename()`(){
			
		}

		///////////
		//Methods//
		///////////
	}
snippet t
	public void test${1:Name}() throws Exception ${2}
snippet cl
	class ${1:`Filename("", "untitled")`} ${2}
snippet in
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent}${3}
snippet m
	${1:void} ${2:method}(${3}) ${4:throws }${5}
snippet v
	${1:String} ${2:var}${3: = null}${4};${5}
snippet co
	static public final ${1:String} ${2:var} = ${3};${4}
snippet cos
	static public final String ${1:var} = "${2}";${3}
snippet as
	assert ${1:test} : "${2:Failure message}";${3}
snippet try
	try {
		${3}
	} catch(${1:Exception} ${2:e}) {
	}
snippet tryf
	try {
		${3}
	} catch(${1:Exception} ${2:e}) {
	} finally {
	}
snippet rst
	ResultSet ${1:rst}${2: = null}${3};${4}
snippet exit
	System.exit(${1:1});
snippet er
	System.err.println(${1});
snippet print
	System.out.println(${1});
snippet printf
	System.out.printf(${1:""});
snippet con
	${3:/** Constructor for `Filename()` */}
	public `Filename()`(${1:/* Params */}){
		${2://Constructor}
	}
